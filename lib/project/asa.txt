  var first_name = TextEditingController();
  var last_name = TextEditingController();
  var address = TextEditingController();
  var email = TextEditingController();
  var mobile = TextEditingController();
  var password = TextEditingController();
  var confirm_password = TextEditingController();
  List<String> selectedHobbies = [];
  List<UserListData> users =[];
  // In _AdduserState

  String? selectedCity;
  String? selectedgender;
  int age = 0;
  String dob = 'Select DOB';
  DateTime? date = DateTime.now();

  final _kaka = GlobalKey<FormState>();

  Widget _buildFormRow({required String label, required Widget child}) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 20),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            flex: 3,
            child: Padding(
              padding: const EdgeInsets.only(top: 15),
              child: Text(label,
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600)),
            ),
          ),
          Expanded(flex: 5, child: child),
        ],
      ),
    );
  }

  InputDecoration _inputDecoration(String hint) {
    return InputDecoration(
      contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 14),
      hintText: hint,
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: Colors.grey.shade400),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: Colors.indigo.shade700, width: 2),
      ),
    );
  }

  void _selectDate() async {
    DateTime? picked = await showDatePicker(
      context: context,
      initialDate: date ?? DateTime.now(),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
    );

    if (picked != null && picked != date) {
      setState(() {
        date = picked;
        dob = DateFormat('dd-MM-yyyy').format(date!);
        age = DateTime.now().year - date!.year;
        if (DateTime.now().isBefore(
            DateTime(date!.year, date!.month, date!.day).add(Duration(days: 1)))) {
          age--;
        }
      });
    }
  }

  void _submitForm() {
    if (_kaka.currentState!.validate()) {
      if (password.text != confirm_password.text) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Passwords do not match')),
        );
        return;
      }

      void showDeleteConfirmationDialog(BuildContext context,UserListData user) {
          showDialog(
            context: context,
            builder: (BuildContext context) {
              return AlertDialog(
                title: Text('Confirm Deletion'),
                content: Text('Are you sure you want to delete this item?'),
                actions: [
                  TextButton(
                    onPressed: () {

                      Navigator.of(context).pop(); // Close dialog
                    },
                    child: Text('Cancel'),
                  ),
                  TextButton(
                    onPressed: () {
                      setState(() {
                        widget.users.remove(user);
                        _filteredUsers.remove(user);
                      });
                      Navigator.of(context).pop(); // Close dialog
                      // Call the delete function
                    },
                    child: Text('Delete', style: TextStyle(color: Colors.red)),
                  ),
                ],
              );
            },
          );
        }

        //   void showDeleteConfirmationDialog(BuildContext context,UserListData user) {
        //     showDialog(
        //       context: context,
        //       builder: (BuildContext context) {
        //         return AlertDialog(
        //           title: Text('Confirm Deletion'),
        //           content: Text('Are you sure you want to delete this item?'),
        //           actions: [
        //             TextButton(
        //               onPressed: () {
        //
        //                 Navigator.of(context).pop(); // Close dialog
        //               },
        //               child: Text('Cancel'),
        //             ),
        //             TextButton(
        //               onPressed: () {
        //                 setState(() {
        //                   widget.users.remove(user);
        //                   _filteredUsers.remove(user);
        //                 });
        //                 Navigator.of(context).pop(); // Close dialog
        //                 // Call the delete function
        //               },
        //               child: Text('Delete', style: TextStyle(color: Colors.red)),
        //             ),
        //           ],
        //         );
        //       },
        //     );
        //   }